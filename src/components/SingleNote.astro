---
import { CheckSquare, CheckSquare2, Square, XSquare, XOctagon } from 'lucide-astro';

interface Props {
  date?: Date;
  displayName: string;
  noteId: number;
  showIsOfflineMessage?: boolean;
  showNotOldEnoughError?: boolean;
  text?: string;
  type: 'cancelled' | 'completed' | 'in-progress' | 'new' | 'rejected' | 'approval-pending';
  userId: string;
}
const {
  date,
  displayName,
  noteId,
  showIsOfflineMessage,
  showNotOldEnoughError,
  text,
  type,
  userId,
  ...rest
} = Astro.props;

const formattedDate = date ? new Intl.DateTimeFormat('de-DE', {
  day: '2-digit',
  month: '2-digit',
  year: 'numeric',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit',
}).format(date) : '';
const maxLength = import.meta.env.NOTE_MAX_LENGTH ?? 209;
const minLength = import.meta.env.NOTE_MIN_LENGTH ?? 3;

let id = 'new-note';
if(type === 'in-progress' || type === 'cancelled' || type === 'completed' || type === 'rejected' || type === 'approval-pending') {
  id = `note${noteId}`;
}

const Element = type === 'new' ? 'form' : 'div';
---

<Element
  class="bg-yellow-300 flex flex-col text-black max-w-96 w-full shadow-lg"
  class:list={[{ 'absolute pointer-events-none': ['cancelled', 'completed', 'rejected'].includes(type) }]}
  id={id}
  {...rest}
  hx-confirm="Bist du sicher das du dieses Todo erstellen möchtest?"
  hx-post={type === 'new' ? '/api/create-note' : undefined}
  hx-swap={type === 'new' ? 'beforeend' : undefined}
  hx-target={type === 'new' ? '#open-notes' : undefined}
  hx-vals={type === 'new' ? `{"display_name": "${displayName}", "user_id": "${userId}"}` : undefined}>
  <header class="bg-yellow-400 flex items-center justify-between px-2 h-14">
    {formattedDate}
    {type === 'new' && 'Neues Todo erstellen'}
    {['approval-pending', 'in-progress'].includes(type) && <Square size="42" />}
    {['cancelled', 'rejected'].includes(type) && <XSquare class="note-icon-cancelled"  size="42" />}
    {type === 'completed' && <CheckSquare2 class="note-icon-completed" size="42" />}
  </header>
  <label
    class="block px-2"
    class:list={[
      { 'relative': type === 'completed' },
    ]}>
    <textarea
      autocomplete="off"
      class="bg-transparent resize-none w-full outline-0 px-2.5 mt-2 single-note-textarea"
      class:list={[
        { 'overflow-hidden': ['cancelled', 'completed', 'rejected'].includes(type) },
        { 'line-through': ['cancelled', 'rejected'].includes(type) },
      ]}
      disabled={type !== 'new'}
      maxlength={maxLength}
      minlength={minLength}
      name="text"
      placeholder="bamboechops Stream schauen, im Chat aktiv sein, ..."
      required
      rows="5">{text}</textarea>
    </label>
  {showNotOldEnoughError && <section class="bg-yellow-400 text-black p-2 mx-2 mb-2 rounded font-semibold text-xs">Hoppala, dieses Todo wurde gerade erst von dir erstellt. Du solltest zumindest {import.meta.env.TODO_MIN_DURATION_IN_MINUTES ?? 15} Minuten brauchen um es abzuschließen. Probiere es später erneut.</section>}
  {type === 'approval-pending' && <p class="font-bold text-xs px-4 mb-2">bamboechop muss dieses Todo noch bestätigen. Bis er es bestätigt wird dieses Todo nicht im Stream sichtbar sein.</p>}
  <footer class="flex mt-auto px-2 pb-2"
    class:list={[{
      'flex-col items-end': type === 'new',
      'items-center justify-between': ['approval-pending', 'in-progress'].includes(type),
    }]}>
    {['approval-pending', 'in-progress'].includes(type) &&
      <button
        class="bg-red-500 hover:bg-red-600 transition-colors flex gap-2 items-center px-2 py-2 text-sm text-white cancel-button"
        hx-confirm={`Bist du sicher das du das Todo "${text}" abbrechen möchtest?`}
        hx-patch="/api/update-note"
        hx-select={`#note${noteId}`}
        hx-swap="outerHTML"
        hx-target={`#note${noteId}`}
        hx-vals={`{ "display_name": "${displayName}", "note_id": "${noteId}", "status": "cancelled", "user_id": "${userId}" }`}
        type="button">
        <XOctagon size="20" />
        Abbrechen
      </button>
      <button
        class="bg-green-500 hover:bg-green-600 transition-colors flex gap-2 items-center px-2 py-2 text-sm text-white font-bold resolve-button"
        hx-confirm={`Bist du sicher das du das Todo "${text}" erledigen möchtest?`}
        hx-patch="/api/update-note"
        hx-select={`#note${noteId}`}
        hx-swap="outerHTML"
        hx-target={`#note${noteId}`}
        hx-vals={`{ "display_name": "${displayName}", "note_id": "${noteId}", "status": "completed", "user_id": "${userId}" }`}
        type="button">
        <CheckSquare size="20" />
        Erledigt
      </button>
    }
    {type === 'new' &&
      <div class="flex items-end">
        {showIsOfflineMessage && <span class="is-offline-info text-sm">bamboechop ist offline, bitte erstelle dein Todo wenn er wieder online ist</span>}
        <div class="flex flex-col items-end">
          <div class="flex h-4">
            <span class="text-xs textarea-counter-info mr-1">Noch <span class="tabular-nums textarea-counter">{minLength}</span> Zeichen...</span>
          </div>
          <button
            class="bg-stone-800 hover:bg-stone-950 disabled:bg-stone-500 transition-colors cursor-not-allowed px-4 py-2 text-sm text-white font-bold save-button"
            disabled
            type="submit">
            Speichern
          </button>
        </div>
      </div>
    }
    {type === 'rejected' && <p class="font-bold text-red-900 text-xs px-4">Dieses Todo wurde von bamboechop abgelehnt. Bitte erstelle es nicht erneut. Wenn du mehr wissen möchtest, wende dich per Discord an bamboechop.</p>}
  </footer>
</Element>

<script define:vars={{ id, maxLength, minLength, type }}>
  const amountOfOpenNotes = parseInt(document.querySelector('#open-notes-amount')?.innerText ?? 0, 10);
  if(type === 'new' && amountOfOpenNotes < 3) {
    const footer = document.querySelector('footer');
    const saveButton = document.querySelector('.save-button');
    const textarea = document.querySelector('textarea');
    const textAreaCounterInfo = document.querySelector('.textarea-counter-info');
    const counter = document.querySelector('.textarea-counter');

    function updateRemainingCharactersInfo() {
      const remainingAmount = minLength - textarea.value.length;
      if(remainingAmount > 0) {
        counter.textContent = remainingAmount.toString(10);
        textAreaCounterInfo?.classList.remove('hidden');
        footer.classList.remove('justify-end');
        footer.classList.add('justify-between');
      } else {
        textAreaCounterInfo?.classList.add('hidden');
        footer.classList.add('justify-end');
        footer.classList.remove('justify-between');
      }
    }

    function updateSaveButtonState() {
      if(saveButton) {
        if(textarea.value.length < minLength) {
          saveButton.disabled = true;
          saveButton.classList.add('cursor-not-allowed');
        } else {
          saveButton.disabled = false;
          saveButton.classList.remove('cursor-not-allowed');
        }
      }
    }

    updateRemainingCharactersInfo();
    updateSaveButtonState();

    textarea.addEventListener('input', () => {
      document.querySelector('.is-offline-info')?.remove();

      updateRemainingCharactersInfo();
      updateSaveButtonState();
    });

    textarea.addEventListener('keypress', (event) => {
      if(event.key === 'Enter' && textarea.value.split('\n').length >= 6) {
        event.preventDefault();
      }
    });
  }

  if(['cancelled', 'completed', 'rejected'].includes(type)) {
    const container = document.querySelector('#completed-notes');
    const note = document.querySelector(`#${id}`);
    if(container) {
      const containerWidth = container.offsetWidth;
      const containerHeight = container.offsetHeight;
      const noteWidth = note.offsetWidth;
      const noteHeight = note.offsetHeight;
      const randomX = (20 + Math.floor(Math.random() * (containerWidth - noteWidth - 40))) / containerWidth * 100;
      const randomY = (20 + Math.floor(Math.random() * (containerHeight - noteHeight - 40))) / containerHeight * 100;
      note.style.left = `${randomX}%`;
      note.style.top = `${randomY}%`;
      note.style.transform = `rotate(${Math.floor(Math.random() * 21) - 10}deg)`;
    }
  }
</script>

<style lang="scss">
  $background: theme('colors.yellow.300');

  :global(.note-icon-cancelled path) {
    stroke: theme('colors.red.600');
  }

  :global(.note-icon-completed path) {
    stroke: theme('colors.green.600');
  }

  .single-note-textarea {
    background-attachment: local;
    background-image:
      linear-gradient(to right, $background 10px, transparent 10px),
      linear-gradient(to left, $background 10px, transparent 10px),
      repeating-linear-gradient($background, $background 30px, #707070 30px, #707070 31px, $background 31px);
    color: #1e1e1e;
    font-family: 'Caveat', sans-serif;
    font-weight: 400;
    font-size: 1.5rem;
    line-height: 31px;

    &::placeholder {
      color: #757575;
    }
  }
</style>
