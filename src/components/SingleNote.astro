---
import { CheckSquare, XOctagon } from 'lucide-astro';

interface Props {
  displayName: string;
  noteId: number;
  text?: string;
  type: 'cancelled' | 'completed' | 'in-progress' | 'new';
  userId: string;
}
const { displayName, noteId, text, type, userId, ...rest } = Astro.props;

const minLength = 3;

let id = 'new-note';
if(type === 'in-progress' || type === 'cancelled' || type === 'completed') {
  id = `note${noteId}`;
}

const Element = type === 'new' ? 'form' : 'div';
---

<Element
  class="bg-yellow-300 flex flex-col text-black max-w-96 w-full shadow-lg"
  class:list={[{ 'absolute pointer-events-none': ['cancelled', 'completed'].includes(type) }]}
  id={id}
  {...rest}
  hx-post={type === 'new' ? '/api/create-note' : undefined}
  hx-swap={type === 'new' ? 'beforeend' : undefined}
  hx-target={type === 'new' ? '#open-notes' : undefined}
  hx-vals={type === 'new' ? `{"display_name": "${displayName}", "user_id": "${userId}"}` : undefined}>
  <header class="bg-yellow-400 flex items-center px-2 h-14">
    {type === 'new' && 'Neues Todo erstellen'}
  </header>
  <label class="block px-2">
  <textarea
    autocomplete="off"
    autofocus={type === 'new'}
    class="bg-transparent resize-none w-full outline-0 px-2.5 mt-2 single-note-textarea"
    class:list={[
      { 'overflow-hidden': ['cancelled', 'completed'].includes(type) },
      { 'line-through': type === 'cancelled' },
      { '': type === 'completed' },
    ]}
    disabled={type !== 'new'}
    name="text"
    minlength={minLength}
    placeholder="KÃ¼che putzen, Einkaufen, ..."
    required
    rows="6">{text}</textarea>
  </label>
  <footer
    class="flex mt-auto px-2 pb-2"
    class:list={[{
      'flex-col items-end': type === 'new',
      'items-center justify-between': type === 'in-progress',
    }]}>
    {type === 'in-progress' &&
      <button
        class="bg-red-500 hover:bg-red-600 transition-colors flex gap-2 items-center px-2 py-2 text-sm text-white cancel-button"
        hx-patch="/api/update-note"
        hx-swap="delete"
        hx-target={`#note${noteId}`}
        hx-vals={`{ "display_name": "${displayName}", "note_id": "${noteId}", "status": "cancelled", "text": "${text}", "user_id": "${userId}" }`}
        type="button">
        <XOctagon size="20" />
        Abbrechen
      </button>
      <button
        class="bg-green-500 hover:bg-green-600 transition-colors flex gap-2 items-center px-2 py-2 text-sm text-white font-bold resolve-button"
        hx-patch="/api/update-note"
        hx-swap="delete"
        hx-target={`#note${noteId}`}
        hx-vals={`{ "display_name": "${displayName}", "note_id": "${noteId}", "status": "completed", "text": "${text}", "user_id": "${userId}" }`}
        type="button">
        <CheckSquare size="20" />
        Erledigt
      </button>
    }
    {type === 'new' &&
      <div class="flex h-4">
        <span class="text-xs textarea-counter-info mr-1">Noch <span class="tabular-nums textarea-counter">{minLength}</span> Zeichen...</span>
      </div>
      <button
        class="bg-stone-800 hover:bg-stone-950 disabled:bg-stone-500 transition-colors cursor-not-allowed px-4 py-2 text-sm text-white font-bold save-button"
        disabled
        type="submit">
        Speichern
      </button>
    }
  </footer>
</Element>

<script define:vars={{ id, minLength, type }}>
  if(type === 'new') {
    const footer = document.querySelector('footer');
    const saveButton = document.querySelector('.save-button');
    const textarea = document.querySelector('textarea');
    const textAreaCounterInfo = document.querySelector('.textarea-counter-info');
    const counter = document.querySelector('.textarea-counter');

    textarea.addEventListener('input', () => {
      const remainingAmount = minLength - textarea.value.length;
      if(remainingAmount > 0) {
        counter.textContent = remainingAmount.toString(10);
        textAreaCounterInfo.classList.remove('hidden');
        footer.classList.remove('justify-end');
        footer.classList.add('justify-between');
      } else {
        textAreaCounterInfo.classList.add('hidden');
        footer.classList.add('justify-end');
        footer.classList.remove('justify-between');
      }

      if(textarea.value.length < minLength) {
        saveButton.disabled = true;
        saveButton.classList.add('cursor-not-allowed');
      } else {
        saveButton.disabled = false;
        saveButton.classList.remove('cursor-not-allowed');
      }
    });

    textarea.addEventListener('keypress', (event) => {
      if(event.key === 'Enter' && textarea.value.split('\n').length >= 6) {
        event.preventDefault();
      }
    })

    saveButton.addEventListener('click', () => {
      window.setTimeout(() => {
        textarea.value = '';
        saveButton.disabled = true;
        saveButton.classList.add('cursor-not-allowed');
        counter.textContent = '20';
        textAreaCounterInfo.classList.remove('hidden');
        footer.classList.remove('justify-end');
        footer.classList.add('justify-between');
      }, 0);
    });
  }

  if(['cancelled', 'completed'].includes(type)) {
    const container = document.querySelector('#completed-notes');
    const note = document.querySelector(`#${id}`);
    if(container) {
      const containerWidth = container.offsetWidth;
      const containerHeight = container.offsetHeight;
      const noteWidth = note.offsetWidth;
      const noteHeight = note.offsetHeight;
      const randomX = (20 + Math.floor(Math.random() * (containerWidth - noteWidth - 40))) / containerWidth * 100;
      const randomY = (20 + Math.floor(Math.random() * (containerHeight - noteHeight - 40))) / containerHeight * 100;
      note.style.left = `${randomX}%`;
      note.style.top = `${randomY}%`;
      note.style.transform = `rotate(${Math.floor(Math.random() * 21) - 10}deg)`;
    }
  }
</script>

<style lang="scss">
  $background: theme('colors.yellow.300');

  .single-note-textarea {
    background-attachment: local;
    background-image:
      linear-gradient(to right, $background 10px, transparent 10px),
      linear-gradient(to left, $background 10px, transparent 10px),
      repeating-linear-gradient($background, $background 30px, #707070 30px, #707070 31px, $background 31px);
    color: #464646;
    font-family: 'Caveat';
    font-weight: 400;
    font-size: 1.5rem;
    line-height: 31px;

    &::placeholder {
      color: #707070;
    }
  }
</style>
