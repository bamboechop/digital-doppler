---
import { Image } from 'astro:assets';
import { UserRoundX } from 'lucide-astro';
import { dbClient } from '../../lib/db.client';
import AdminLayout from '../../layouts/AdminLayout.astro';

export const prerender = false;

const token = Astro.cookies.get('twitch-token');
const userId = import.meta.env.ADMIN_TWITCH_ID;

try {
  const response = await fetch('https://api.twitch.tv/helix/users', {
    headers: {
      Authorization: `Bearer ${token.value}`,
      'Client-Id': import.meta.env.PUBLIC_TWITCH_CLIENT_ID,
    }
  });
  if(response.status < 200 || response.status >= 300) {
    throw (await response.json());
  }

  const { data } = await response.json();
  if(data[0].id !== userId) {
    throw new Error('Invalid user');
  }
} catch (err) {
  console.error(err);
  return Astro.redirect('/dashboard');
}

const title = 'admin-dashboard/coworking/bamboechop';

let userNotesInProgress = [];
let userNotesToApprove = [];

try {
  const userDbNotes = await dbClient.notes.findMany({
    orderBy: [
      { note_id: 'asc' },
    ],
    select: {
      date: true,
      note_id: true,
      status: true,
      text: true,
      user_id: true,
      users: {
        select: {
          avatar_url: true,
          display_name: true,
        },
      },
    },
    where: {
      NOT: {
        user_id: parseInt(userId, 10),
      },
    },
  });
  userNotesInProgress = userDbNotes.filter(note => note.status === 'in-progress');
  userNotesToApprove = userDbNotes.filter(note => note.status === 'approval-pending');
} catch (err) {
  console.error(err);
}
---

<AdminLayout class="admin-dashboard flex flex-col gap-3" title={title}>
  <div>
    <h1 class="text-2xl">{title}</h1>
    <span class="text-xs">Nächster Refresh in <span class="refresh-timer">0</span> Sekunden</span>
  </div>
  <hr class="border-gray-600 -ml-4" />
  <h2 class="bg-gray-700 decoration-1 px-2 text-xl underline underline-offset-2 w-max">Neue Todos von Zusehern</h2>
    <ul
      class="flex flex-wrap gap-2"
      id="approval-note-list">
      {userNotesToApprove.length > 0 ? (
        userNotesToApprove.map((note, index) => (
          <li
            class="bg-gray-800 flex flex-col gap-2 p-2 max-w-80 w-full rounded"
            data-date={note.date}
            id={`note${note.note_id}`}>
            <div class="flex items-center gap-2">
              <button
                class="bg-gray-900 p-2 rounded"
                hx-confirm={`Bist du sicher das ${note.users.display_name} gebannt werden soll?`}
                hx-put="/api/admin/ban-user"
                hx-vals={`{ "user_id": "${note.user_id}" }`}
                tabindex="-1"
                title={`${note.users.display_name} bannen`}
                type="button">
                <UserRoundX class="text-red-500" size="20" />
              </button>
              <Image
                alt={note.users.display_name}
                class="rounded-full h-8 w-8"
                height="32"
                src={note.users.avatar_url}
                width="32" />
              <h3 class="text-lg">{note.users.display_name}</h3>
            </div>
            <span class="text-sm">{note.date}</span>
            <p class="mb-2">{note.text}</p>
            <div class="flex gap-2 justify-between mt-auto">
              <div class="approve-button flex flex-col">
                {index === 0 && <span class="auto-approve-timer pl-1 text-xs">00:00</span>}
                <button
                  class="bg-green-500 px-2 py-1 rounded text-white font-bold approve-button"
                  hx-confirm={`Bist du sicher das das Todo von ${note.users.display_name} mit dem Text "${note.text}" genehmigt werden soll?`}
                  hx-patch="/api/admin/update-note"
                  hx-swap="outerHTML"
                  hx-target={`#note${note.note_id}`}
                  hx-vals={`{ "display_name": "${note.users.display_name}", "note_id": "${note.note_id}", "status": "in-progress", "user_id": "${note.user_id}" }`}
                  type="button">Genehmigen</button>
              </div>
              <button
                class="bg-red-500 mt-auto px-2 py-1 rounded text-white font-bold"
                hx-confirm={`Bist du sicher das das Todo von ${note.users.display_name} mit dem Text "${note.text}" abgelehnt werden soll?`}
                hx-patch="/api/admin/update-note"
                hx-swap="outerHTML"
                hx-target={`#note${note.note_id}`}
                hx-vals={`{ "display_name": "${note.users.display_name}", "note_id": "${note.note_id}", "status": "rejected", "user_id": "${note.user_id}" }`}
                type="button">Ablehnen</button>
            </div>
          </li>
        ))
      ) : (
        <li class="bg-green-900 rounded px-8 py-4 max-w-max w-full">Keine Todos von Zusehern zum genehmigen</li>
      )}
    </ul>
  <hr class="border-gray-600 -ml-4" />
  <h2 class="bg-gray-700 decoration-1 px-2 text-xl underline underline-offset-2 w-max">Aktive Todos von Zusehern</h2>
  <ul
    class="flex flex-wrap gap-2"
    id="active-note-list">
    {userNotesInProgress.length > 0 ? (
      userNotesInProgress.map(note => (
        <li
          class="bg-gray-800 flex flex-col gap-2 p-2 max-w-80 w-full rounded"
          id={`note${note.note_id}`}>
          <div class="flex items-center gap-2">
            <button
              class="bg-gray-900 p-2 rounded"
              hx-confirm={`Bist du sicher das ${note.users.display_name} gebannt werden soll?`}
              hx-put="/api/admin/ban-user"
              hx-vals={`{ "display_name": "${note.users.display_name}", "user_id": "${note.user_id}" }`}
              tabindex="-1"
              title={`${note.users.display_name} bannen`}
              type="button">
              <UserRoundX class="text-red-500" size="20" />
            </button>
            <Image
              alt={note.users.display_name}
              class="rounded-full h-8 w-8"
              height="32"
              src={note.users.avatar_url}
              width="32" />
            <h3 class="text-lg">{note.users.display_name}</h3>
          </div>
          <span class="text-sm">{note.date}</span>
          <p class="mb-2">{note.text}</p>
          <div class="flex gap-2 justify-end mt-auto">
            <button
              class="bg-red-500 px-2 py-1 rounded text-white font-bold"
              hx-confirm={`Bist du sicher das das Todo von ${note.users.display_name} mit dem Text "${note.text}" gelöscht werden soll?`}
              hx-patch="/api/admin/update-note"
              hx-swap="outerHTML"
              hx-target={`#note${note.note_id}`}
              hx-vals={`{ "display_name": "${note.users.display_name}", "note_id": "${note.note_id}", "status": "rejected", "user_id": "${note.user_id}" }`}
              type="button">Löschen</button>
          </div>
        </li>
      ))
    ) : (
      <li class="bg-green-900 rounded px-8 py-4 max-w-max w-full">Keine aktiven Todos von Zusehern</li>
    )}
    </ul>
</AdminLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const refreshTimer = document.querySelector('.refresh-timer');
    let refreshTime = 30;
    window.setInterval(() => {
      refreshTime -= 1;
      refreshTimer.textContent = `${refreshTime}`;
      if(refreshTime === 0) {
        window.location.reload();
      }
    }, 1000);
    refreshTimer.textContent = `${refreshTime}`;

    const oldestNote = document.querySelector<HTMLLIElement>('#approval-note-list li');
    if(oldestNote) {
      const oldestNoteDateInSeconds = Math.floor(new Date(oldestNote.dataset.date).getTime() / 1000);
      const autoApproveTimer = oldestNote.querySelector<HTMLSpanElement>('.auto-approve-timer');

      function calculateRemainingTimeForAutoApprove() {
        const nowInSeconds = Math.floor(new Date().getTime() / 1000);
        const diffInSeconds = nowInSeconds - oldestNoteDateInSeconds;

        // Calculate remaining seconds until now is five minutes in the past
        let remainingSeconds = Math.max(0, 300 - diffInSeconds);

        // Format remaining seconds in mm:ss format
        let minutes = Math.floor(remainingSeconds / 60);
        let seconds = remainingSeconds % 60;

        autoApproveTimer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        if(diffInSeconds > 300) {
          window.clearInterval(intervalId);

          /* override window.confirm to automatically approve the oldest note */
          const originalConfirmFunction = window.confirm;
          window.confirm = () => {
            window.confirm = originalConfirmFunction;
            return true;
          }

          oldestNote.querySelector<HTMLButtonElement>('.approve-button button').click();

          // TODO either reload page after auto approve (lazy way) or refresh oldestNote variable and restart interval
        }
      }

      const intervalId = window.setInterval(() => {
        calculateRemainingTimeForAutoApprove();
      }, 1000);
      calculateRemainingTimeForAutoApprove();
    }
  });
</script>
