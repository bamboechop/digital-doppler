---
import { RotateCw, UserRoundX } from 'lucide-astro';
import UserInfo from '../components/UserInfo.astro';
import Layout from '../layouts/Layout.astro';
import Notes from '../components/Notes.astro';
import { dbClient } from '../lib/db.client';
import SmallDisplay from '../components/SmallDisplay.astro';

export const prerender = false;

let cancelledNotes = [];
let completedNotes = [];
let openNotes = [];
let totalNotesAmount: number = 0;
let displayName = null;
let image = null;
let userId = null;
let banned = false;

const token = Astro.cookies.get('twitch-token');

try {
  const userResponse = await fetch('https://api.twitch.tv/helix/users', {
    headers: {
      Authorization: `Bearer ${token.value}`,
      'Client-Id': import.meta.env.PUBLIC_TWITCH_CLIENT_ID,
    }
  });
  if(userResponse.status < 200 || userResponse.status >= 300) {
    throw (await userResponse.json());
  }

  const { data: userData } = (await userResponse.json());
  userId = parseInt(userData[0].id, 10);
  displayName = userData[0].display_name;
  image = userData[0].profile_image_url;

  const followStatusResponse = await fetch(`https://api.twitch.tv/helix/channels/followed?user_id=${userId}&broadcaster_id=${import.meta.env.PUBLIC_TWITCH_BROADCASTER_ID}`, {
    headers: {
      Authorization: `Bearer ${token.value}`,
      'Client-Id': import.meta.env.PUBLIC_TWITCH_CLIENT_ID,
    }
  });
  if(followStatusResponse.status < 200 || followStatusResponse.status >= 300) {
    throw (await followStatusResponse.json());
  }
  // do not redirect bamboechop even though he isn't following himself
  if(userData[0].id !== import.meta.env.PUBLIC_TWITCH_BROADCASTER_ID) {
    if((await followStatusResponse.json()).length === 0) {
      return Astro.redirect('/gain-access');
    }
  }

  let coworkingChannelRedeemRedeemed = JSON.parse(import.meta.env.PUBLIC_TWITCH_MODERATORS ?? []).includes(userId);

  if(!coworkingChannelRedeemRedeemed) {
    const subscriptionStatusResponse = await fetch(`https://api.twitch.tv/helix/subscriptions/user?user_id=${userId}&broadcaster_id=${import.meta.env.PUBLIC_TWITCH_BROADCASTER_ID}`, {
      headers: {
        Authorization: `Bearer ${token.value}`,
        'Client-Id': import.meta.env.PUBLIC_TWITCH_CLIENT_ID,
      }
    })
    if(subscriptionStatusResponse.status < 200 || subscriptionStatusResponse.status >= 300) {
      throw (await subscriptionStatusResponse.json());
    }
    coworkingChannelRedeemRedeemed = (await subscriptionStatusResponse.json()).length > 0;
  }

  // set redeem to true if user is bamboechop
  if(userData[0].id === import.meta.env.PUBLIC_TWITCH_BROADCASTER_ID) {
    coworkingChannelRedeemRedeemed = true;
  }

  if(coworkingChannelRedeemRedeemed) {
    // store that the user has "redeemed" the coworking redeem due to being a sub or moderator
    await dbClient.user_redeemed_coworking_redeem.upsert({
      create: {
        user_id: userId
      },
      update: {},
      where: {
        user_id: userId
      },
    });
  }

  const user = await dbClient.users.upsert({
    create: {
      avatar_url: userData[0].profile_image_url,
      display_name: displayName,
      last_login_date: new Date(),
      user_id: userId,
      user_name: userData[0].login,
    },
    update: {
      avatar_url: userData[0].profile_image_url,
      display_name: displayName,
      last_login_date: new Date(),
    },
    where: {
      user_id: userId
    },
  });
  if(user && user.banned) {
    banned = true;
  }
  const userRedeemedCoworkingRedeem = await dbClient.user_redeemed_coworking_redeem.findUnique({
    where: {
      user_id: userId
    }
  });
  if(!userRedeemedCoworkingRedeem) {
    return Astro.redirect('/gain-access');
  }
  const dbNotes = await dbClient.notes.findMany({
    orderBy: [
      { note_id: 'asc' },
    ],
    where: {
      user_id: userId
    },
  });
  cancelledNotes = dbNotes.filter(note => note.status === 'cancelled' || note.status === 'rejected');
  completedNotes = dbNotes.filter(note => note.status === 'completed');
  openNotes = dbNotes.filter(note => note.status === 'approval-pending' || note.status === 'in-progress');
  totalNotesAmount = dbNotes.length;
} catch (err) {
  // Twitch errors contain status and error properties
  if(err.status && err.error) {
    Astro.cookies.delete('twitch-token');
    return Astro.redirect('/?error=twitch-error');
  }
  // TODO db error handling
  console.error(err);
}
---

<Layout title="dashboard/coworking/bamboechop">
  <h1 class="sr-only">Dashboard</h1>
  <section class="gap-8 grid grid-cols-[240px_1fr] h-dvh w-full">
      <div class="flex flex-col">
        <UserInfo
          notesAmount={{ cancelled: cancelledNotes.length, completed: completedNotes.length, inProgress: openNotes.length, total: totalNotesAmount }}
          imageUrl={image}
          name={displayName} />
        <button
          class="flex gap-2 items-center rounded px-4 py-2 text-sm w-max fixed top-[275px]"
          type="button"
          onclick="window.location.reload()">
          <RotateCw />
          Aktualisieren
        </button>
        <SmallDisplay />
      </div>
    {!banned ? (
      <Notes
        completedNotes={[...cancelledNotes, ...completedNotes]}
        displayName={displayName}
        openNotes={openNotes}
        userId={userId} />
    ) : (
      <div class="bg-red-500 flex flex-col gap-2 items-center justify-center self-center justify-self-center rounded px-8 py-4 max-w-3xl text-center">
        <UserRoundX size="64" />
        Aufgrund der von dir erstellten Notizen wurdest du von bamboechop gesperrt.<br />
        Falls du mehr über die Sperre wissen möchtest oder du bamboechop davon überzeugen möchtest, dass er dich entsperrt, kontaktiere ihn gerne auf Discord.
      </div>
    )}
  </section>
</Layout>
