---
import { Image } from 'astro:assets';
import { dbClient } from '../../../lib/db.client';
import { UserRoundX } from 'lucide-astro';

if(Astro.request.method !== 'PATCH') {
  return new Response('Method not allowed', { status: 405 });
}

const adminUserId = import.meta.env.ADMIN_TWITCH_ID;
const token = Astro.cookies.get('twitch-token');

try {
  const response = await fetch('https://api.twitch.tv/helix/users', {
    headers: {
      Authorization: `Bearer ${token.value}`,
      'Client-Id': import.meta.env.PUBLIC_TWITCH_CLIENT_ID,
    }
  });
  if(response.status < 200 || response.status >= 300) {
    throw (await response.json());
  }

  const { data } = await response.json();
  if(data[0].id !== adminUserId) {
    throw new Error('Invalid user');
  }
} catch (err) {
  console.error(err);
  return new Response('Invalid request', { status: 400 });
}

const { isOnline } = Astro.locals;

let userNotesInProgress = [];
let userNotesToApprove = [];

try {
  const formData = await Astro.request.formData();
  const displayName = formData.get('display_name');
  const note_id = formData.get('note_id');
  const status = formData.get('status');
  const user_id = formData.get('user_id');

  if(!displayName || !note_id || !status || !user_id) {
    return new Response('Invalid request', { status: 400 });
  }

  if(typeof displayName !== 'string' || typeof note_id !== 'string' || typeof status !== 'string' || typeof user_id !== 'string') {
    return new Response('Invalid request', { status: 400 });
  }

  try {
    let note;
    try {
      note = await dbClient.notes.update({
        data: {
          status,
        },
        where: {
          note_id: parseInt(note_id, 10),
          status: { in: ['approval-pending', 'in-progress'] },
          user_id: parseInt(user_id, 10),
        },
      });
    } catch (err) {
      if(err.meta.cause !== 'Record to update not found.') {
        throw err;
      }
      note = await dbClient.notes.findUnique({ where: { note_id: parseInt(note_id, 10) } });
    }
    const notes = await dbClient.notes.findMany({
      orderBy: [
        { note_id: 'asc' },
      ],
      select: {
        date: true,
        note_id: true,
        status: true,
        text: true,
        user_id: true,
        users: {
          select: {
            avatar_url: true,
            display_name: true,
          },
        },
      },
      where: {
        NOT: {
          user_id: parseInt(adminUserId, 10),
        },
      },
    });
    userNotesInProgress = notes.filter(note => note.status === 'in-progress');
    userNotesToApprove = notes.filter(note => note.status === 'approval-pending');

    if(isOnline) {
      await fetch(import.meta.env.BAMBBOT_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Coworking-Secret': import.meta.env.BAMBBOT_API_SECRET,
        },
        body: JSON.stringify({
          date: note.date,
          displayName,
          note_id: note.note_id,
          status,
          text: note.text,
        }),
      });
    }
  } catch (err) {
    console.error(err);
    return new Response('Internal server error', { status: 500 });
  }
} catch (err) {
  console.error(err);
  return new Response('Internal server error', { status: 500 });
}
---

<ul
  class="flex flex-wrap gap-2"
  hx-swap-oob="true"
  id="approval-note-list">
  {userNotesToApprove.length > 0 ? (
    userNotesToApprove.map((note, index) => (
      <li
        class="bg-gray-800 flex flex-col gap-2 p-2 max-w-80 w-full rounded"
        data-date={note.date}
        id={`note${note.note_id}`}>
        <div class="flex items-center gap-2">
          <button
            class="bg-gray-900 p-2 rounded"
            hx-confirm={`Bist du sicher das ${note.users.display_name} gebannt werden soll?`}
            hx-put="/api/admin/ban-user"
            hx-vals={`{ "user_id": "${note.user_id}" }`}
            tabindex="-1"
            title={`${note.users.display_name} bannen`}
            type="button">
            <UserRoundX class="text-red-500" size="20" />
          </button>
          <Image
            alt={note.users.display_name}
            class="rounded-full h-8 w-8"
            height="32"
            src={note.users.avatar_url}
            width="32" />
          <h3 class="text-lg">{note.users.display_name}</h3>
        </div>
        <span class="text-sm">{note.date}</span>
        <p class="mb-2">{note.text}</p>
        <div class="flex gap-2 justify-between mt-auto">
          <div class="approve-button flex flex-col">
            {index === 0 && <span class="auto-approve-timer pl-1 text-xs">00:00</span>}
            <button
              class="bg-green-500 px-2 py-1 rounded text-white font-bold approve-button"
              hx-confirm={`Bist du sicher das das Todo von ${note.users.display_name} mit dem Text "${note.text}" genehmigt werden soll?`}
              hx-patch="/api/admin/update-note"
              hx-swap="outerHTML"
              hx-target={`#note${note.note_id}`}
              hx-vals={`{ "display_name": "${note.users.display_name}", "note_id": "${note.note_id}", "status": "in-progress", "user_id": "${note.user_id}" }`}
              type="button">Genehmigen</button>
          </div>
          <button
            class="bg-red-500 mt-auto px-2 py-1 rounded text-white font-bold"
            hx-confirm={`Bist du sicher das das Todo von ${note.users.display_name} mit dem Text "${note.text}" abgelehnt werden soll?`}
            hx-patch="/api/admin/update-note"
            hx-swap="outerHTML"
            hx-target={`#note${note.note_id}`}
            hx-vals={`{ "display_name": "${note.users.display_name}", "note_id": "${note.note_id}", "status": "rejected", "user_id": "${note.user_id}" }`}
            type="button">Ablehnen</button>
        </div>
      </li>
    ))
  ) : (
    <li class="bg-green-900 rounded px-8 py-4 max-w-max w-full">Keine Todos von Zusehern zum genehmigen</li>
  )}
</ul>

<ul
  class="flex flex-wrap gap-2"
  hx-swap-oob="true"
  id="active-note-list">
  {userNotesInProgress.length > 0 ? (
    userNotesInProgress.map(note => (
      <li
        class="bg-gray-800 flex flex-col gap-2 p-2 max-w-80 w-full rounded"
        id={`note${note.note_id}`}>
        <div class="flex items-center gap-2">
          <button
            class="bg-gray-900 p-2 rounded"
            hx-confirm={`Bist du sicher das ${note.users.display_name} gebannt werden soll?`}
            hx-put="/api/admin/ban-user"
            hx-vals={`{ "display_name": "${note.users.display_name}", "user_id": "${note.user_id}" }`}
            tabindex="-1"
            title={`${note.users.display_name} bannen`}
            type="button">
            <UserRoundX class="text-red-500" size="20" />
          </button>
          <Image
            alt={note.users.display_name}
            class="rounded-full h-8 w-8"
            height="32"
            src={note.users.avatar_url}
            width="32" />
          <h3 class="text-lg">{note.users.display_name}</h3>
        </div>
        <span class="text-sm">{note.date}</span>
        <p class="mb-2">{note.text}</p>
        <div class="flex gap-2 justify-end mt-auto">
          <button
            class="bg-red-500 px-2 py-1 rounded text-white font-bold"
            hx-confirm={`Bist du sicher das das Todo von ${note.users.display_name} mit dem Text "${note.text}" gelöscht werden soll?`}
            hx-patch="/api/admin/update-note"
            hx-swap="outerHTML"
            hx-target={`#note${note.note_id}`}
            hx-vals={`{ "display_name": "${note.users.display_name}", "note_id": "${note.note_id}", "status": "rejected", "user_id": "${note.user_id}" }`}
            type="button">Löschen</button>
        </div>
      </li>
    ))
  ) : (
    <li class="bg-green-900 rounded px-8 py-4 max-w-max w-full">Keine aktiven Todos von Zusehern</li>
  )}
</ul>
