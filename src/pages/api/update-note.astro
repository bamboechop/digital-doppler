---
import { dbClient } from '../../lib/db.client';
import SingleNote from '../../components/SingleNote.astro';

if(Astro.request.method !== 'PATCH') {
  return new Response('Method not allowed', { status: 405 });
}

const { isOnline } = Astro.locals;

let amountOfCancelledNotes = 0;
let amountOfClosedNotes = 0;
let amountOfCompletedNotes = 0;
let amountOfNotes = 0;
let amountOfOpenNotes = 0;
let displayName;
let note;
let notes;
let noteNotOldEnough = false;

try {
  const formData = await Astro.request.formData();
  displayName = formData.get('display_name');
  const note_id = formData.get('note_id');
  const status = formData.get('status');
  const text = formData.get('text');
  const user_id = formData.get('user_id');

  if(!displayName || !note_id || !status || !text || !user_id) {
    return new Response('Invalid request', { status: 400 });
  }

  if(typeof displayName !== 'string' || typeof note_id !== 'string' || typeof status !== 'string' || typeof text !== 'string' || typeof user_id !== 'string') {
    return new Response('Invalid request', { status: 400 });
  }

  try {
    const minDurationInMinutes = import.meta.env.TODO_MIN_DURATION_IN_MINUTES ?? 15;
    note = await dbClient.notes.update({
      data: {
        status,
      },
      where: {
        note_id: parseInt(note_id, 10),
        user_id: parseInt(user_id, 10),
        date: {
          lte: new Date(Date.now() - minDurationInMinutes * 60 * 1000),
        },
      },
    });
  } catch (err) {
    note = await dbClient.notes.findUnique({ where: { note_id: parseInt(note_id, 10) } });
    noteNotOldEnough = true;
  }
  notes = await dbClient.notes.findMany({
    where: {
      user_id: parseInt(user_id, 10),
    },
  });
  amountOfCancelledNotes = notes.filter((note) => note.status === 'cancelled').length;
  amountOfClosedNotes = notes.filter((note) => ['cancelled', 'completed'].includes(note.status)).length;
  amountOfCompletedNotes = notes.filter((note) => note.status === 'completed').length;
  amountOfNotes = notes.length;
  amountOfOpenNotes = notes.filter((note) => note.status === 'in-progress').length;

  if(isOnline) {
    await fetch(`${import.meta.env.BAMBBOT_API_URL}/update`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Coworking-Secret': import.meta.env.BAMBBOT_API_SECRET,
      },
      body: JSON.stringify({
        displayName,
        status,
        text,
      }),
    });
  }
} catch (err) {
  console.error(err);
}
---

<span id="closed-notes-amount" hx-swap-oob="true">{amountOfClosedNotes}</span>

<span id="open-notes-amount" hx-swap-oob="true">{amountOfOpenNotes}</span>

<span id="work-in-progress-todos-amount" hx-swap-oob="true">{amountOfOpenNotes}</span>

<span id="total-todos-amount" hx-swap-oob="true">{amountOfNotes}</span>

<span id="completed-todos-amount" hx-swap-oob="true">{amountOfCompletedNotes}</span>

<span id="cancelled-todos-amount" hx-swap-oob="true">{amountOfCancelledNotes}</span>

{!noteNotOldEnough && amountOfOpenNotes === 2
  ? <div id="open-notes" hx-swap-oob="afterbegin"><SingleNote displayName={displayName} type="new" userId={note.user_id} /></div>
  : undefined
}

{!noteNotOldEnough && <div id="completed-notes" hx-swap-oob="beforeend">
  <SingleNote date={note.date} displayName={displayName} noteId={note.note_id} text={note.text} type={note.status} userId={note.user_id} />
</div>}

{noteNotOldEnough && <SingleNote date={note.date} displayName={displayName} noteId={note.note_id} showNotOldEnoughError={true} text={note.text} type={note.status} userId={note.user_id} />}
